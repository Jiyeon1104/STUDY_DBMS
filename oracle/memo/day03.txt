- DML(Data Manipulation Language) : 데이터 조작어
	1. SELECT : 조회(검색)
		SELECT 컬럼명1, 컬럼명, ...
		FROM 테이블명
		WHERE 조건식
		
	2. INSERT : 추가
		1) 컬럼을 생략할 수 있다, 이 때 default 제약조건이 발동된다.
		INSERT INTO 테이블명
		(컬럼명1, 컬럼명2, ...)
		VALUES(값1, 값2, ...)

		2)모든 값을 전부 작성해되며, 컬럼명은 직접 작성하지 않는다.
		INSERT INTO 테이블명
		VALUES(값1, 값2, ...)

	3. UPDATE : 수정
		UPDATE 테이블명
		SET 기존 컬럼명1 = 새로운 값1, 기존 컬럼명2 = 새로운 값2, ....
		WHERE 조건식

	4. DELETE : 삭제
		DELETE FROM 테이블명
-----------------------------------------------------------------------
조건식 : 참 또는 거짓 둘 중 하나가 나오는 식
	
	>, <		: 초과, 미만
	>=, <=		: 이상, 이하
	=		: 같다
	<>, !=, ^=	: 같지 않다
	AND		: 둘 다 참이면 참
	OR		: 둘 중 하나라도 참이면 참

※ 위 연산자들은 WHERE 절에서 사용 가능하다.
-----------------------------------------------------------------------
- TCL(Transaction Control Language) : 트랜젝션 제어어

트랜젝션
	하나의 작업 단위

COMMIT
	모든 작업을 확정하는 명령어

ROLLBACK
	이전 커밋한 지점으로 이동

**
TRUNCATE는 테이블 내용을 전체 삭제하므로, DELETE보다 빠르게 처리할 수 있다.
대용량 데이터 처리에 유리하지만 복구가 불가능하기 때문에 복구가 가능한
DELETE를 사용하는 것이 좋다.
--------------------------------------------------------------------
정규화
	삽입/수정/삭제의 이상현상을 제거하기 위한 작업
	데이터의 중복을 최소화하는 데에 목적이 있다.
	5차 정규화까지 있으나 3차 정규화까지만 진행한다.

1차 정규화(1NF)
	하나의 컬럼에 값이 1개씩만 있어야 한다.

	상품명
	바지1, 바지2, 바지3

	*검색이 힘들다.

	-1차 정규화 진행
	상품명
	바지1
	바지2
	바지3

2차 정규화(2NF)
	테이블의 모든 컬럼이 서로 관계가 있어야 한다.

	USER
	이름	나이	상품명
	한동석	10	바지
	홍길동	20	치마
	이순신	30	자켓

	-2차 정규화 진행

	USER
	이름	나이
	한동석	10
	홍길동	20
	이순신	30

	PRODUCT
	상품명
	바지
	치마
	자켓

3차 정규화(3NF)
	하나의 컬럼이 다른 컬럼을 결정해서는 안된다.

	이름	시	구	동	우편번호
	한동석	남양주	화도읍	구암리	12312
	홍길동	서울시	관악구	봉천동	33322

	*우편번호로 시, 구, 동을 알 수 있다.
	*중복된 데이터가 생길 가능성이 있다.

	-3차 정규화 진행
	이름	우편번호
	한동석	12312
	홍길동	33322

	이름	시	구	동
	한동석	남양주	화도읍	구암리
	홍길동	서울시	관악구	봉천동
------------------------------------------------------------------------
데이터베이스에서 정규화가 필요한 이유
	데이터베이스를 잘못 설계하면 불필요한 데이터 중복으로 인해 공간이 낭비된다.
	이런 현상을 이상(Anomaly)라고 한다.

	회원번호와 프로젝트코드 두 컬럼의 조합키 설정되어 있는 테이블이고
	한 사람은 하나의 부서만 가질 수 있다.

회원번호		이름	부서	프로젝트코드	급여	부서별 명수
21122401	한동석	개발팀	ABC0001		3000	4
21122401	한동석	개발팀	DEF1112		2000	4
21122401	한동석	개발팀	GHI9911		4000	4
21122402	홍길동	기획팀	EFG0881		5000	2
21122403	이순신	디자인팀	CBA9474		6000	3

이상 현상의 종류
	- 삽입 이상
	새 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야하는 문제

	담당 프로젝트가 정해지지 않은 사원이 있다면,
	프로젝트 코드에 NULL을 작성할 수 없으므로 이 사원은 테이블에 추가될 수 없다.
	따라서 '미정'이라는 프로젝트 코드를 따로 만들어서 삽입해야 한다.

	- 갱신 이상
	중복 행 중에서 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제

	한 명의 사원은 반드시 하나의 부서에만 속할 수 있다.
	만약 "한동석"이 보안팀으로 부서를 옮길 시 3개 모두 갱신해주지 않는다면
	개발팀인지 보안팀인지 알 수 없다.

	- 삭제 이상
	행을 삭제하면 꼭 필요한 데이터까지 함께 삭제되는 문제

	이순신이 담당한 프로젝트를 박살내서 드랍된다면 이순신 행을 모두 삭제하게 된다.
	따라서 프로젝트에서 드랍되면 정보를 모두 드랍하게 된다.

	이러한 이상 현상이 발생하는 이유는 테이블이 정규화가 되어 있지 않기 때문이다.
	정규화를 진행하기 위해서는 각 컬럼간의 관련성을 파악해야 하고, 이 관련성을
	"함수적 종속성"(Functional Dependency)이라고 한다.
	따라서 하나의 테이블에서는 하나의 함수적 종속성만 존재하도록 정규화를 한다.

	함수
	X -> Y
	*Y가 X에 의존한다.

	X : 결정자	X가 Y를 결정
	Y : 종속자	Y가 X에 종속
--------------------------------------------------------------------------------------------














