데이터베이스 (DB)
- 정형데이터(structured data) : 틀이 잡혀있는 체계화된 데이터
	      ex) excel, csv ... 
- 비정형데이터 (unstructured data) : 틀이 없이 사전 정의가 없는 데이터, 다양하고 방대한 양의 데이터
	         ex) 텍스트, 이미지, 음원, 음성
오라클 데이터 베이스는 정형데이터를 다루는 관계형 데이터베이스임
많은 기업들에서는 관계형 데이터 베이스를 많이 사용함
SQL은 정형 데이터로 만들어진 관계형 데이터베이스를 조작하는 언어임

관계형 데이터베이스란 열과 행 2차원으로 이루어진 테이블을 중심으로 설계되고 키와 관계란 연결고리로
그 테이블들을 원하는 방식으로 데이터를 조회하고 가공하는 방식의 데이터베이스임
기타 계층형 DB / 객체지향형 DB / XML DB

SQL은 관계형 데이터베이스들에서 사용이 되는 표준 언어
1970년대에 SEQUEL이라는 언어를 기반으로 만들어졌음
1980년대에 ANSI ISO 표준을 따르고 있음

SQL 특징
1. 사용하기 쉽다
2. 비절차적 언어임
3. 데이터를 정의 검색 조작함
4. 표준언어임

- 테이블 전체 내용 보기
SELECT * FROM HR.EMPLOYEES;

- 특정 컬럼 조회
SELECT employee_id, first_name, last_name FROM HR.EMPLOYEES;

- 특정 컬럼을 기준으로 내림차순 정렬하여 출력하기
SELECT employee_id, first_name, last_name FROM HR.EMPLOYEES
ORDER BY employee_id DESC;

- 고유한 하나씩만 출력
SELECT DISTINCT job_id FROM HR.EMPLOYEES;

- 별칭 설정 (AS 생략 가능) > 실제 열 이름이 변경되는 것은 아님
SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성 FROM HR.EMPLOYEES;

- 열 값들을 붙여서 하나의 셀에 출력 (연결 연산자)
SELECT employee_id, first_name || ' ' || last_name FROM HR.EMPLOYEES;
SELECT employee_id AS 사번, first_name || ' ' || last_name AS 이름, email || '@' || 'company.com' AS 이메일 FROM HR.EMPLOYEES;

- 기존 열값을 이용한 계산
SELECT employee_id, salary, salary + 500, salary - 100, (salary * 1.1) / 2 FROM hr.employees;
SELECT employee_id AS 사원번호,
    salary AS 급여,
    salary + 500 AS 추가급여,
    salary - 100 AS 인하급여,
    (salary * 1.1) / 2 AS 조정급여
FROM hr.employees;

➊ 참조하려는 테이블로부터(FROM)

➋ 해당 조건식으로(WHERE)

➌ 열을 선택(SELECT)하여 조회합니다.

- 조건에 맞는 행만 뽑기
SELECT * 
FROM hr.employees
WHERE employee_id = 100;

- 데이터에 조건을 줄 때는 대소문자 가림
SELECT * 
FROM hr.employees
WHERE first_name = 'David';

- 부등호 연산자
SELECT * 
FROM hr.employees
WHERE employee_id >= 105;

- BETWEEN A AND B (A와 B를 다 포함)
SELECT * 
FROM hr.employees
WHERE salary BETWEEN 10000 AND 20000;

- IN연산자 (특정 항목들이 포함된 행들만 추출)
SELECT * 
FROM hr.employees
WHERE salary IN (10000,17000,24000);

- LIKE ('AD%' % : AD뒤에는 몇 글자가 오든 상관 안 하고 AD가 맨 앞에 포함만 되어있으면 OK)
조회 조건 값이 명확하지 않을 때 사용함
(_ : 글자 한 개를 의미, 만약 3개가 있으면 AD 뒤에 문자 3개가 온다는 것을 의미)
SELECT * 
FROM hr.employees
WHERE job_id LIKE 'AD%';

- AND (조건 2개 동시 만족)
SELECT * 
FROM hr.employees 
WHERE salary > 4000
AND job_id = 'IT_PROG';

- AND OR 연산자 혼용 (SALARY는 4000이 반드시 넘고 IT_PROG와 FI_ACCOUNT 둘 중에 하나를 만족하는 모든 조건을 출력하세요)
SELECT * 
FROM hr.employees 
WHERE salary > 4000
AND job_id = 'IT_PROG'
OR job_id = 'FI_ACCOUNT';

- <> 연산자 (105가 아닌 것들만 추출)
SELECT * 
FROM hr.employees 
WHERE employee_id <> 105

- IS NOT NULL
NOT : 결과값을 뒤집어 출력
SELECT * 
FROM hr.employees 
WHERE manager_id IS NOT NULL;

# 함수
함수에는 단일행함수와 그룹 함수가 있음
■ 데이터 값을 계산하거나 조작합니다(단일 행 함수).

■ 행의 그룹에 대해 계산하거나 요약합니다(그룹 함수).

■ 열의 데이터 타입을 변환합니다. 즉, 날짜와 숫자 등 데이터 타입을 상호 변환합니다.

 SELECT last_name,
    LOWER(last_name), # LOWER 전부 소문자 UPPER 전부 대문자 INITCAP 첫 글자만 대문자
    UPPER(last_name),
    email,
    INITCAP(email)
FROM hr.employees;

- 문자열 자르기
SELECT job_id, SUBSTR(job_id, 1, 2)
FROM hr.employees;

- LPAD 왼쪽을 채우는데 자릿수를 만들어 빈 공간에 채움
SELECT first_name, LPAD(first_name, 12, '*')
FROM hr.employees;

- RPAD 오른쪽을 채우는데 자릿수를 만들어 빈 공간에 채움
SELECT first_name, RPAD(first_name, 12, '*')
FROM hr.employees;

- LTRIM/RTRIM 왼쪽/ 오른쪽부터 찾아서 만나는 값을 삭제 주로 여백 삭제용으로 많이 씀 
SELECT job_id, 
LTRIM(job_id, 'F'),
RTRIM(job_id, 'T')
FROM hr.employees;

 -ROUND 함수
SELECT salary, 
        salary / 30 AS 일급,
        ROUND(salary/30, 0) AS 적용결과0,
        ROUND(salary/30, 1) AS 적용결과1,
        ROUND(salary/30, -1) AS 적용결과MINUS1
FROM hr.employees;

-TRUNC 함수
SELECT salary, 
        salary / 30 AS 일급,
        TRUNC(salary/30, 0) AS 적용결과0,
        TRUNC(salary/30, 1) AS 적용결과1,
        TRUNC(salary/30, -1) AS 적용결과MINUS1
FROM hr.employees;

함수
-데이터 값을 계산하거나 조작 (단일행 함수)
-행의 글부에 대한 계산 또는 요약 (그룹 함수)
-열의 데이터 타입을 변환, 즉 날짜와 숫자 등 데이터 타입을 상호 변환

변환 함수
데이터 타입 변환은 오라클에 의해 자동으로 (암묵적으로) 혹은 수동으로 (명시적으로) 실행할 수 있음

자동 타입 변환
varchar로 되어 있는 데이터 값 100은 number타입으로 자동 변환되어 산술 계산될 수 있음
반대로 number 타입 100은 varchar타입으로 자동변환되어 저장될 수 있음

SELECT 1 + '2'
FROM DUAL
 
ans : 3

하지만 자동 형변환을 이용할 수 있더라도 SQL의 안정성을 위해 수동 데이터 타입 변환을 수행할 것을 권장함

TO_CHAR 숫자 문자 날짜 값을 VARCHAR2타입으로 변환
TO_NUMBER 문자를 숫자로 변환
TO_DATE 날짜처럼 보이는 문자열을 진짜 날짜 타입으로 변환

현재 시스템의 진짜 날짜에서 년만 추출하여 표기
SELECT TO_CHAR(SYSDATE, 'YY')
FROM DUAL;

현재 시스템의 진짜 날짜에서 월만 추출하여 표기
SELECT TO_CHAR(SYSDATE, 'MON')
FROM DUAL;

특정 년월일을 나타내기
SELECT TO_CHAR(TO_DATE('20000101', 'YYYY-MM-DD'), 'YYYY-MM-DD')
FROM DUAL;

시간 표현
SELECT TO_CHAR(SYSDATE, 'HH:MI:SS PM')
FROM DUAL;

날짜 시간 함께 표현
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH:MI:SS PM')
FROM DUAL;

# 숫자로 형변환
123이라는 문자를 진짜 숫자로 변환

SELECT TO_NUMBER('123')
FROM DUAL;

함수
NOT NULL : NULL 값을 가지지 못하도록 지정

NULL의 특징
값이 할당되지 않아 사용이 불가능한 값
0과 공백과는 다른 값
NULL을 포함하는 계산의 결과값은 NULL

SELECT salary * commission_pct 
FROM hr.employees
ORDER BY commission_pct;

commission_pct 값이 null인 경우에는 1로 치환하여 계산함
SELECT salary * NVL(commission_pct, 1)
FROM hr.employees
ORDER BY commission_pct;

DECODE 함수 : if와 유사 조건 처리
(열, 조건, true인 경우, false인 경우)

SELECT first_name,
    last_name,
    salary 원래급여,
    DECODE(department_id, 60, salary * 1.1, salary) 조정된급여,
    DECODE(department_id, 60, '10% 보너스', '노보너스') 보너스지급여부
FROM hr.employees;

CASE : 복잡한 조건을 여러 개 처리
DECODE함수는 데이터 값이 정확히 맞거나 틀린 경우 처리하기가 쉽고
CASE함수는 조건의 범위가 다양하고 복잡한 경우 쉽게 처리할 수 있음

SELECT first_name, last_name, salary,
    CASE 
        WHEN salary >= 9000 THEN '상위급여'
        WHEN salary BETWEEN 6000 AND 8999 THEN '중위급여'
        ELSE '하위급여'
    END AS 급여등급
    
FROM hr.employees;

데이터 값의 범위를 정확하게 모르는 상태에서 특정 조건에 맞춰 출력한다면 CASE문이 유용함
실무에서도 CASE문은 매우 다양하게 활용할 수 있음
예를 들면 점수에 대한 등급, 나이에 대한 나이대 설정, 지역 구분 등 얼마든지 응용할 수 있는 범위가 많음

RANK, DENSE_RANK, ROW_NUMBER 순위 매기기
RANK - 공통 순위만큼 건너뛰어 다음 순위를 출력
DENSE_RANK - 공통 순위를 출력하고 건너 뛰지 않고 다음 순위 출력 1,2,2,3
ROW_NUMBER - 공통 순위 없이 출력

그룹 요약 함수
단일행함수와는 달리 여러 행에 대해 함수가 적용되어 하나의 결과를 나타내는 함수
집계함수라고 부르기도 함

대부분의 그룹함수는 NULL이 있으면 그 값은 제외하고 연산함
하지만 COUNT 함수는 NULL 값도 행으로 셀 수 있음

GROUP BY, HAVING
GROUP BY (그룹으로 묶기)

SELECT 열이름, 열이름 (그룹)
FROM 테이블이름
WHERE 조건식(생략가능)
GROUP BY 열이름
ORDER BY 열이름 (정렬 생략 가능)

테이블에 접근하여 WHERE에 맞는 데이터만 골라내고 (생략가능)
열을 같은 값끼리 그룹화하여 오름차순 / 내림차순 정렬하여 결과를 출력

employee 테이블에서 employee_id 가 10이상인 직원들만 job_id 별로 그룹화하여
job_id 별로 총 급여와 job_id 별 평균 급여를 구하고
job_id 별 총 급여를 기준으로 내림차순 정렬하세요

HAVING 연산된 그룹함수 결과에 조건을 적용하기
WHERE 절에서는 그룹 함수를 사용할 수 없기 때문에 HAVING절을 사용하여 그룹함수의 결과에 다시 조건을 적용함

employees 테이블에서 employee_id 가 10 이상인 직원들에 대해 job_id 별로 그룹화하여 job_id 별로 총 급여와 평균급여를 구하고
job_id 별 총급여가 30000보다 큰 값만 출력하세요

SELECT job_id 직무, SUM(salary) 총급여, AVG(salary) 평균급여
FROM hr.employees
WHERE employee_id >= 10
GROUP BY job_id
HAVING SUM(salary) > 30000
ORDER BY 총급여 DESC


